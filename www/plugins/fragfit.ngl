

var FragResultsPreset = function( data, params ){
    var structureComp = data.structureComp;
    var linkerComp = data.linkerComp;
    var linkerData = data.linkerData;
    var mapComp = data.mapComp;

    var isFragfit = data.mapComp !== undefined;

    var p = Object.assign( {}, params );

    var surfaceOpacity = p.surfaceOpacity || 0.6;

    stage.viewer.setFog( null, 40, 80 );

    // structure

    var cartoonRepr = structureComp.addRepresentation( "cartoon", {
    
    } );

    // var licoriceRepr = structureComp.addRepresentation( "licorice", {
    //
    // } );

    var seqid=[]
    var score=[]
    var clash=[]
    var corr=[]
    for (var i in linkerData){
        seqid.push(linkerData[i][ isFragfit ? 7 : 6 ]);
        score.push(linkerData[i][ isFragfit ? 2 : 1 ]);
        clash.push(linkerData[i][ isFragfit ? 5 : 4 ]);
        corr.push(linkerData[i][0]);
        
    }
    
    seqidmax = Math.max.apply(null,seqid);
    seqidmin = Math.min.apply(null,seqid);
    scoremax = Math.max.apply(null,score);
    scoremin = Math.min.apply(null,score);
    clashmax = Math.max.apply(null,clash);
    clashmin = Math.min.apply(null,clash);
    corrmax = Math.max.apply(null,corr);
    corrmin = Math.min.apply(null,corr);
    
    
    var clashScheme = NGL.ColorMakerRegistry.addScheme( function( params ){
        if( !params.scale ) this.scale = "OrRd";
        this.domain = [ clashmin, clashmax ];
        var clashScale = this.getScale();
        this.atomColor = function( atom ){
            var modelindex = atom.residue.chain.model.index + 1
            var clashValue = linkerData[ modelindex ][ isFragfit ? 5 : 4 ];
            return clashScale( clashValue );
        };

    } );

    var seqidentScheme = NGL.ColorMakerRegistry.addScheme( function( params ){
        if( !params.scale ) this.scale = "Greens";
        this.domain = [ seqidmin,  seqidmax ];
        var seqidentScale = this.getScale();
        this.atomColor = function( atom ){
            var modelindex = atom.residue.chain.model.index + 1
            var seqidentValue = linkerData[ modelindex ][ isFragfit ? 7 : 6 ];
            return seqidentScale( seqidentValue );
        };
    } );

    var scoreScheme = NGL.ColorMakerRegistry.addScheme( function( params ){
        if( !params.scale ) this.scale = "PuBuGn";
        this.domain = [ scoremin, scoremax];
        var scoreScale = this.getScale();
        this.atomColor = function( atom ){
            var modelindex = atom.residue.chain.model.index + 1
            var scoreValue = linkerData[ modelindex ][ isFragfit ? 2 : 1 ];
            return scoreScale( scoreValue );
        };
    } );

    var correlationScheme = NGL.ColorMakerRegistry.addScheme( function( params ){
        if( !params.scale ) this.scale = "YlGnBu";
        this.domain = [ corrmin, corrmax ];
        var correlationScale = this.getScale();
        this.atomColor = function( atom ){
            var modelindex = atom.residue.chain.model.index + 1
            var correlationValue = linkerData[ modelindex ][ 0 ];
            return correlationScale( correlationValue );
        };
    } );

    this.getColorschemeOptions = function(){
        var options = { "": "" };
        if( isFragfit ) options[ correlationScheme ] = "Correlation";
        options[ scoreScheme ] = "Score";
        options[ seqidentScheme ] = "Sequence Identity";
        options[ clashScheme ] = "Clashes";
        return options;
    }

    var cartoon2Repr = linkerComp.addRepresentation( "cartoon", {
        radius: 0.18,
        colorScheme: isFragfit ? correlationScheme : scoreScheme
   
    } );

    linkerComp.centerView();

    // mrc

    var surfaceRepr;

    if( isFragfit ){

        surfaceRepr = mapComp.addRepresentation( "surface", {
            name: "map",
            isolevelType: "sigma",
            isolevel: p.isolevel || 2.0,
            smooth: 0,
            wireframe: p.wireframe || false,
            opacity: p.wireframe ? 1.0 : surfaceOpacity,
            side: THREE.DoubleSide,
            opaqueBack: true,
            color: "grey"
        } );

    }

    //API

    this.setSurfaceParams = function( params ){

        if( !isFragfit ) return;

        var p = Object.assign( {}, params );

        if( p.opacity !== undefined ){
            surfaceOpacity = p.opacity;
        }

        if( p.wireframe === true ){
            p.opacity = 1.0;
        }else if( p.wireframe === false ){
            p.opacity = surfaceOpacity;
        }

        surfaceRepr.setParameters( p );

    };

   // this.backboneRepr = backboneRepr;
    this.surfaceRepr = surfaceRepr;
    this.cartoon2Repr = cartoon2Repr;

    this.dispose = function(){
        // TODO remove color schemes
    };

};


function getStemInfo( linkerModel ){

    var linkerResidues = linkerModel.chains[ 0 ].residues;
    var ntermResidue = linkerResidues[ 0 ];
    var ctermResidue = linkerResidues[ linkerResidues.length - 1 ];

    return {
        ntermChain: ntermResidue.atoms[ 0 ].chainname,
        ntermResno: ntermResidue.atoms[ 0 ].resno,
        ctermChain: ctermResidue.atoms[ 0 ].chainname,
        ctermResno: ctermResidue.atoms[ 0 ].resno
    };

}


function buildLinkerStructure( structure, linkerModel, callback ){

    var newStructure = new NGL.Structure();
    var atoms = newStructure.atoms;
    var model = structure.models[ 0 ];
    var modelindex = structure.atoms[ 0 ].modelindex;

    var stem = getStemInfo( linkerModel );
    var ntermChain = stem.ntermChain;
    var ntermResno = stem.ntermResno;
    var ctermChain = stem.ctermChain;
    var ctermResno = stem.ctermResno;

    var linkerAdded = false;

    model.eachAtom( function( a ){

        if( !linkerAdded &&
            a.chainname === ctermChain && a.resno === ctermResno
        ){

            linkerModel.eachAtom( function( a ){
                var resno = a.resno;
                if( resno > ntermResno && resno < ctermResno ){
                    var newAtom = new NGL.Atom().copy( a );
                    newAtom.modelindex = modelindex;
                    atoms.push( newAtom );
                }
            } );

            linkerAdded = true;

        }

        if( a.chainname < ntermChain || a.chainname > ctermChain ||
            ( a.chainname === ntermChain && a.resno <= ntermResno ) ||
            ( a.chainname === ctermChain && a.resno >= ctermResno )
        ){

            atoms.push( new NGL.Atom().copy( a ) );

        }

    } );

    NGL.buildStructure( newStructure, function(){
        callback( newStructure );
    } );

}


var FragResultsWidget = function( data ){

    var structureComp = data.structureComp;
    var linkerComp = data.linkerComp;
    var linkerData = data.linkerData;

    var isFragfit = data.mapComp !== undefined;

    var isolevel = 2.0;
    var wireframe = true;

    var container = new UI.Panel();

    var params = {
        isolevel: isolevel,
        wireframe: wireframe
    };

    var fragResultsPreset = new FragResultsPreset( data, params );


    // Isolevel

    var isolevelNumber = new UI.Number( isolevel )
        .setWidth( "100px" )
        .onChange( function(){
            fragResultsPreset.setSurfaceParams( {
                isolevel: isolevelNumber.getValue()
            } );
        } );

    // Wireframe

    var wireframeCheckbox = new UI.Checkbox( wireframe )
        .onChange( function(){
            fragResultsPreset.setSurfaceParams( {
                wireframe: wireframeCheckbox.getValue()
            } );
        } );

    // Show all linker

    var showAllBtn = new UI.Button( "show all" )
        .onClick( function(){
            fragResultsPreset.cartoon2Repr.setSelection( "*" );
            virtualTable.selectRow();
        } );
        
    // Show first

    var showFirstBtn = new UI.Button( "show first" )
        .onClick( function(){
            fragResultsPreset.cartoon2Repr.setSelection( "/0" );
            virtualTable.selectRow( 0 );
        } );
        

    // PDB info

    var tether;

    var showPdbInfo = false;

    var pdbTitle = new UI.Text();

    var pdbInfo = new UI.OverlayPanel()
        .setDisplay( "none" )
        .attach( this.dom )
        .setMaxWidth( "250px" )
        .add( pdbTitle );

    function setPdbTitle( event, title ){
        pdbTitle.setValue( title );
        pdbInfo.setDisplay( "block" );

        tether = new Tether( {
            element: pdbInfo.dom,
            target: event.target,
            attachment: 'top right',
            targetAttachment: 'top left',
            offset: '0px 5px',
            constraints: [
                {
                    to: container,
                    attachment: 'element',
                    pin: [ 'top', 'bottom' ]
                }
            ]
        } );

        tether.position();
    }

    var pdbTitleCache = {};

    function getPdbTitle( event, id ){
        id = id.toUpperCase();

        if( id in pdbTitleCache ){

            if( pdbTitleCache[ id ] !== null ){
                setPdbTitle( event, pdbTitleCache[ id ] );
            }

        }else{

            fetchPdbTitles( [ id ] ).then( function(){

                if( showPdbInfo && showPdbInfo.toUpperCase() === id ){
                    setPdbTitle( event, pdbTitleCache[ id ] );
                }

            } );

        }
    }

    function fetchPdbTitles( idList ){
        var idListFiltered = [];
        idList.forEach( function( id ){
            if( pdbTitleCache[ id ] === undefined ){
                pdbTitleCache[ id ] = null;  // mark as pending
                idListFiltered.push( id );
            }
        } );
        if( idListFiltered.length === 0 ) return Promise.resolve();

        var base = "http://www.rcsb.org/pdb/rest/describePDB?structureId=";
        var url = base + idListFiltered.join( "," ).toUpperCase();

        return NGL.autoLoad( url, {

            ext: "xml",
            noWorker: true

        } ).then( function( xml ){

            var descr = xml.data.root;

            descr.children.forEach( function( pdb ){

                var title = pdb.attributes.title;
                var id = pdb.attributes.structureId;

                pdbTitleCache[ id.toUpperCase() ] = title;

            } );

        } );
    };

    // Download linker

    function downloadAllLinker(){
        var stem = getStemInfo( linkerComp.structure.models[ 0 ] );
        var nterm = stem.ntermResno + ":" + stem.ntermChain;
        var cterm = stem.ctermResno + ":" + stem.ctermChain;

        var selection = new NGL.Selection(
            "not ( " + nterm + " ) and not ( " + cterm + ")"
        );
        var subset = new NGL.StructureSubset(
            linkerComp.structure, selection
        );

        var pdbWriter = new NGL.PdbWriter( subset );
        pdbWriter.download( "fragFitLinker" );
    }

    var downloadAllBtn = new UI.Button( "download all" )
        .onClick(
            downloadAllLinker
        );

    function downLoadLinkerStructure( index ){
        var linkerItem = linkerItems[ index ];
        var idx = linkerItem[ 0 ];

        var structure = structureComp.structure;
        var linkerModel = linkerComp.structure.models[ idx - 1 ];

        var stem = getStemInfo( linkerModel );
        var nterm = stem.ntermResno + ":" + stem.ntermChain;
        var cterm = stem.ctermResno + ":" + stem.ctermChain;

        var remarks = [
            "FragFit linker ID: " + idx,
            "FragFit stem residues: " + nterm + " -- " + cterm,
            "FragFit score: " + linkerItem[ isFragfit ? 3 : 2 ],
            "FragFit source PDB ID: " + linkerItem[ isFragfit ? 5 : 4 ],
            "FragFit source sequence: " + linkerItem[ isFragfit ? 4 : 3 ]
        ];

        if( isFragfit ){
            remarks.splice(
                2, 0,
                "FragFit cross-correlation: " + linkerItem[ 1 ]
            );
        }

        buildLinkerStructure( structure, linkerModel, function( newStructure ){
            var pdbWriter = new NGL.PdbWriter( newStructure, {
                remarks: remarks
            } );
            pdbWriter.download( "fragFitModel" + idx );
        } );
    }

    // Linker list

    var linkerItems = [];
    for( var name in linkerData ){
        linkerItems.push(
            [ parseInt( name ) ].concat( linkerData[ name ] )
        );
    }

    function selectLinker( index ){
        if( index !== undefined ){
            fragResultsPreset.cartoon2Repr.setSelection(
                "/" + ( linkerItems[ index ][ 0 ] - 1 )
            );
          //fragResultsPreset.cartoon2Repr.setSelection(
          //      "Pro and /" + ( linkerItems[ index ][ 0 ] - 1 )
          //  );   
        }
    }

    var columns = [
        {
            name: "ID",
            index: 0,
            align: "right",
            width: 25
        },
        {
            name: "Download",
            index: 0,
            align: "center",
            width: 13,
            format: function( value ){
                return new UI.Icon( "download" );
            },
            onClick: function( event, index, value ){
                downLoadLinkerStructure( index );
                event.stopPropagation();
            }
        },
        // {
        //     name: "Score",
        //     index: isFragfit ? 2 : 1,
        //     align: "right",
        //     width: 30,
        //     format: function( value ){
        //         return value.toFixed( 2 );
        //     }
        // },
        {
            name: "Score",
            index: isFragfit ? 3 : 2,
            align: "right",
            width: 30,
            format: function( value ){
                return value.toFixed( 2 );
            }
        },
        {
            name: "PDB",
            index: isFragfit ? 5 : 4,
            align: "left",
            width: 35,
            onMouseOver: function( event, index, value ){
                showPdbInfo = value;
                getPdbTitle( event, value );
            },
            onMouseOut: function( event, index, value ){
                showPdbInfo = false;
                pdbInfo.setDisplay( "none" );
            }
        },
        {
            name: "Clashes",
            index: isFragfit ? 6 : 5,
            align: "right",
            width: 30
        },
        {
            name: "Sequence",
            index: isFragfit ? 4 : 3,
            align: "left",
            width: linkerItems[ 0 ][ isFragfit ? 4 : 3 ].length * 10+2,
            format: function( value ){
                if (value.indexOf("G"||"P")!=-1){
                    var newval = ""
                    for (var i=0; i < value.length; i++) {
                        if (value[i]==="G" || value[i]==="P") {
                            newval = newval + "<u><b>" + value[i] + "</b></u>"
                        }else{
                            newval = newval + value[i]
                        }
                    }
                    return new UI.Html( '<FONT SIZE = 3 FACE="Courier">'+newval+'</FONT>' );
                }else{
                    return new UI.Html('<FONT SIZE = 3 FACE="Courier">'+value+'</FONT>' );
                }
            }
        },
        {
            name: "Seq Identity",
            index: isFragfit ? 8 : 7,
            align: "right",
            width: 35,
            format: function( value ){
                return value.toFixed( 2 );
            }
        },
        {
            name: "Seq Position",
            index: isFragfit ? 7 : 6,
            align: "right",
            width: 90
        }
    ];

    if( isFragfit ){
        columns.splice(
            2, 0,
            {
                name: "Cross-correlation",
                index: 1,
                align: "right",
                width: 30,
                format: function( value ){
                    return value.toFixed( 2 );
                }
            }
        )
    }

    var params = {
        onRowSelect: function( event, index ){
            selectLinker( index );
        }
    }

    var virtualTable = new UI.VirtualTable(
            linkerItems, 18, 400, columns, params
        )
        .setWidth( "100%" )
        .setOverflowX( "auto" )
        .setMarginTop( "5px" );

    // pre-fetch pdb info
    virtualTable.list.setRenderChunkCallback( function( from, to ){
        var idList = [];
        for( var i = from; i < to; ++i ){
            idList.push( linkerItems[ i ][ isFragfit ? 5 : 4 ] );
        }
        fetchPdbTitles( idList );
    } );

    // sort by crosscorrel/score & select first
    virtualTable
        .sortColumn( isFragfit ? 1 : 2, true )
        .selectRow( 0 );

    var colorOptions = fragResultsPreset.getColorschemeOptions();
    var linkercolorSelect = new UI.Select()
        .setOptions( colorOptions )
        .onChange( function(){
            fragResultsPreset.cartoon2Repr.setParameters( {
                colorScheme:linkercolorSelect.getValue()
            } )
        } );
    linkercolorSelect.dom.selectedIndex=1

    if( isFragfit ){
        container.add(
            new UI.Text( "Isolevel (sigma):" ).setMarginRight( "10px" ),
            isolevelNumber,
            new UI.Break(),
            new UI.Text( "Wireframe:" ).setMarginRight( "10px" ),
            wireframeCheckbox,
            new UI.Break()
        );
    }

    container.add(
        new UI.Text( "Color scheme:" ).setMarginRight( "15px" ),
        linkercolorSelect,
        new UI.Break()
    );

    container.add(
        new UI.Break(),
        showAllBtn.setMarginRight( "10px" ),
        showFirstBtn.setMarginRight( "10px" ),
        downloadAllBtn,
        new UI.Break(),
        new UI.Break(),
        virtualTable
    );

    return container;

};


function loadFragResults( files ){

    var isFragfit = files.mapMrc !== undefined;

    var initComp = function( comp ){
        comp.requestGuiVisibility( false );
        return comp;
    }

    var promiseList = [
        stage.loadFile( files.structurePdb, { ext: "pdb" } ).then( initComp ),
        stage.loadFile( files.linkerPdb, { ext: "pdb" } ).then( initComp ),
        NGL.autoLoad( files.linkerJson, { ext: "json" } )
    ];

    if( isFragfit ){
        promiseList.push(
            stage.loadFile( files.mapMrc, { ext: "mrc" } ).then( initComp )
        );
    }

    function init( results ){
        var json = results[ 2 ].data;
        var data = {
            structureComp: results[ 0 ],
            linkerComp: results[ 1 ],
            linkerData: json.linker ? json.linker : json,
            linkerParams: json.params ? json.params : {},
            mapComp: isFragfit ? results[ 3 ] : undefined
        };
        return new FragResultsWidget( data );
    }

    return Promise.all( promiseList ).then( init );

}


var FragResultsLoaderWidget = function( isFragfit ){

    var container = new UI.Panel();

    var pdbFile = new UI.File();
    var mrcFile = new UI.File();
    var linkerFile = new UI.File();
    var jsonFile = new UI.File();
    var loadBtn = new UI.Button( "Load" ).onClick( load );

    var infoText = new UI.Text();

    var form = new UI.Panel();
    var info = new UI.Panel();
    var results = new UI.Panel();

    //

    function load(){

        form.setDisplay( "none" );
        infoText.setValue( "loading..." );

        var files = {
            structurePdb: pdbFile.getFiles()[ 0 ],
            mapMrc: isFragfit ? mrcFile.getFiles()[ 0 ] : undefined,
            linkerPdb: linkerFile.getFiles()[ 0 ],
            linkerJson: jsonFile.getFiles()[ 0 ]
        };

        if( !files.structurePdb ||
            ( isFragfit && !files.mapMrc ) ||
            !files.linkerPdb ||
            !files.linkerJson
        ){
            infoText.setValue( "please supply all files" );
            return;
        }

        function init( widget ){
            infoText.setValue( "" );
            info.setDisplay( "none" );
            form.setDisplay( "none" );
            results.add( widget );
        }

        function onError( error ){
            form.setDisplay( "block" );
            infoText.setValue( "ERROR" );
            console.error( error );
        }

        loadFragResults( files )
            .then( init )
            .catch( onError );

    }

    //

    form.add(
        new UI.Text( "Structure PDB file" ).setMarginBottom( "3px" ),
        new UI.Break(),
        pdbFile,
        new UI.Break(),
        new UI.Break()
    );

    if( isFragfit ){
        form.add(
            new UI.Text( "Map MRC file" ).setMarginBottom( "3px" ),
            new UI.Break(),
            mrcFile,
            new UI.Break(),
            new UI.Break()
        );
    }

    form.add(
        new UI.Text( "Linker PDB file" ).setMarginBottom( "3px" ),
        new UI.Break(),
        linkerFile,
        new UI.Break(),
        new UI.Break(),
        new UI.Text( "Linker JSON file" ).setMarginBottom( "3px" ),
        new UI.Break(),
        jsonFile,
        new UI.Break(),
        new UI.Break(),
        loadBtn.setMarginRight( "10px" )
    );

    info.add(
        infoText
    );

    container.add(
        form,
        info,
        results
    );

    return container;

};


var FragJobWidget = function( server, isFragfit ){

    var container = new UI.Panel();
    var results = new UI.Panel();

    //

    // assumes server is ready
    var tool = server.getTool(
        isFragfit ? "linkit-density" : "linkit"
    );

    tool.signals.jobSubmitted.add( function( job ){

        results.clear();
       

        if( job === "ERROR" ){
            results.add(
                new UI.Text( "ERROR submitting job" )
            );
        }else{
           // toolWidget.setDisplay( "none" );
            job.signals.statusChanged.add( function(){
                updateStatus( job )
            } );
        }

    } );
    var toolWidgetAll = new ToolWidget( tool );
    var toolWidget = toolWidgetAll.container
    var membraneplane = new UI.Button( "calculate membrane plane" );
    var clear = new UI.Button( "clear input fields" );
    var extendn = new UI.Button( "extend n-term" );
    var extendc = new UI.Button( "extend c-term" );
    toolWidgetAll.container.add( new UI.Break(), new UI.Break(), membraneplane, clear, new UI.Break(), extendn, extendc );

    //membraneplane
    membraneplane.onClick( function (){
        var tool2 = server.getTool(
            "tmdet"
        );
        tool2.signals.jobSubmitted.add( function( job2 ){
            job2.signals.statusChanged.add( function(){
                if( job2.running === false ){
                    if( job2.check === true ){
                        status.setDisplay( "none" );
                        results.clear();
                        var baseUrl2 = job2.urlFor( "file" ) + "/";
                        var structurePdb2 = baseUrl2 + "input_pdb_file_tmdet.ply";
                        var initComp2 = function( comp2 ){
                            comp2.addRepresentation( "surface", {background: true, color: "white"});
                            comp2.requestGuiVisibility( false );
                            return comp2;
                        }
                        stage.loadFile( structurePdb2, { ext: "ply" } ).then( initComp2 )
                    }
                }else{
                    status.setDisplay( "block" );
                    status.clear().add(
                        new UI.Text( "Membrane calculation running" )
                    )
                }
            } );
        } );
        var data2 = new FormData( toolWidgetAll.form.dom );
        tool2.submit( data2 );
        
    } );
    
    //clear
    clear.onClick( function (){
        var inputvals = ["res1", "res2", "seq"]
        for( var i in inputvals ) {
            toolWidgetAll.form.dom.children[inputvals[i]].value = "";
        }
    });
    
    //extend n-term
    extendn.onClick ( function (){
        var inputval2 = toolWidgetAll.form.dom.children["res2"].value;
        var resid2 = parseInt( inputval2.substring(0,inputval2.indexOf(':')) )-1;
        var chain2 = inputval2.split( ':' );
        var inputval1 = toolWidgetAll.form.dom.children["res1"].value;
        var resid1 = parseInt( inputval1.substring(0,inputval1.indexOf(':')) )-1;
        var chain1 = inputval1.split( ':' );
        if( resid2 < resid1 ) {
            stage.eachComponent(function(comp){
                if( comp.name === toolWidgetAll.form.dom.children["pdb_file"].files[0].name ) {
                    try {
                        var selection = new NGL.Selection( (resid2+1).toString() +":"+chain2[chain2.length-1] );
                        var atom = comp.structure.getAtoms( selection, true );
                        var selection2 = new NGL.Selection( (resid2).toString() +":"+chain2[chain2.length-1] );
                        var atom2 = comp.structure.getAtoms( selection2, true );
                        NGL.AA1[atom2.resname];
                        toolWidgetAll.form.dom.children["res2"].value = resid2.toString() + ":" + chain2[chain2.length-1];
                        toolWidgetAll.form.dom.children['seq'].value = NGL.AA1[atom.resname] + toolWidgetAll.form.dom.children['seq'].value;
                        // console.log( atom.resname + atom.resno + NGL.AA1[atom.resname] + (resid2+1).toString() );
                    } catch(e) {}
                    
                }
            });
        }else if( resid1 <= resid2 ) {
            stage.eachComponent( function(comp){
                if( comp.name === toolWidgetAll.form.dom.children["pdb_file"].files[0].name ) {
                    try {
                        var selection = new NGL.Selection( (resid1+1).toString() +":"+chain1[chain1.length-1] );
                        var atom = comp.structure.getAtoms( selection, true );
                        var selection2 = new NGL.Selection( (resid1).toString() +":"+chain1[chain1.length-1] );
                        var atom2 = comp.structure.getAtoms( selection2, true );
                        NGL.AA1[atom2.resname];
                        toolWidgetAll.form.dom.children["res1"].value = resid1.toString() + ":" + chain1[chain1.length-1];
                        toolWidgetAll.form.dom.children['seq'].value = NGL.AA1[atom.resname] + toolWidgetAll.form.dom.children['seq'].value;
                        // console.log( atom.resname + atom.resno + NGL.AA1[atom.resname] + (resid1+1).toString() );
                    } catch(e) {}
                    
                }
            } );
        }
    });

    // extend c-term
    extendc.onClick ( function (){
        var inputval2 = toolWidgetAll.form.dom.children["res2"].value;
        var resid2 = parseInt(inputval2.substring(0,inputval2.indexOf(':')))+1;
        var chain2 = inputval2.split(':');
        var inputval1 = toolWidgetAll.form.dom.children["res1"].value;
        var resid1 = parseInt(inputval1.substring(0,inputval1.indexOf(':')))+1;
        var chain1 = inputval1.split(':');
        if( resid2 >= resid1 ) {
            stage.eachComponent(function(comp){
                if( comp.name === toolWidgetAll.form.dom.children["pdb_file"].files[0].name ) {
                    try {
                        var selection = new NGL.Selection( (resid2-1).toString() +":"+chain2[chain2.length-1] );
                        var selection2 = new NGL.Selection( (resid2).toString() +":"+chain2[chain2.length-1] );
                        var atom = comp.structure.getAtoms( selection, true );
                        var atom2 = comp.structure.getAtoms( selection2, true );
                        NGL.AA1[atom2.resname];
                        toolWidgetAll.form.dom.children['seq'].value = toolWidgetAll.form.dom.children['seq'].value + NGL.AA1[atom.resname];
                        toolWidgetAll.form.dom.children["res2"].value = resid2.toString() + ":" + chain2[chain2.length-1];
                        // console.log( atom.resname + atom.resno + NGL.AA1[atom.resname] + (resid2-1).toString() );
                    } catch(e) {}
                }
            });
        }else if( resid1 > resid2 ) {
            stage.eachComponent(function(comp){
                if( comp.name === toolWidgetAll.form.dom.children["pdb_file"].files[0].name ) {
                    try {
                        var selection = new NGL.Selection( (resid1-1).toString() +":"+chain1[chain1.length-1] );
                        var atom = comp.structure.getAtoms( selection, true );
                        var selection2 = new NGL.Selection( (resid1).toString() +":"+chain1[chain1.length-1] );
                        var atom2 = comp.structure.getAtoms( selection2, true );
                        NGL.AA1[atom2.resname];
                        toolWidgetAll.form.dom.children['seq'].value = toolWidgetAll.form.dom.children['seq'].value + NGL.AA1[atom.resname];
                        toolWidgetAll.form.dom.children["res1"].value = resid1.toString() + ":" + chain1[chain1.length-1];
                        // console.log( atom.resname + atom.resno + NGL.AA1[atom.resname] + (resid1-1).toString() );
                    } catch(e) {}
                }
            });
        }
    });

    // picking
    var flag2 = "res1";
    stage.signals.onPicking.add( function( d){
        tool.args.forEach( function( arg ){
            if (arg.name==="res1" && flag2==="res1"){
                c=d.atom.qualifiedName("noResname");
                toolWidgetAll.form.dom.children['res1'].value = c.substring(0,c.indexOf('.'));
                flag2="res1a";
            }else if (arg.name==="res2" && flag2==="res2") {
                y=d.atom.qualifiedName("noResname");
                toolWidgetAll.form.dom.children['res2'].value = y.substring(0,y.indexOf('.'));
                flag2="res1"
            }else if(flag2==="res1a") flag2="res2"
        } );
    });
    // status

    var status = new UI.Panel()
        .setDisplay( "none" );

    function updateStatus( job ){

        if( job.running === false ){
            if( job.check === true ){
                status.setDisplay( "none" );
                results.clear();
                loadResults( job );
            }else{
                status.setDisplay( "none" );
                toolWidget.setDisplay( "block" );
                results.clear();
                results.add(
                    new UI.Text( "ERROR: not loops found, please consult the faq" )// ,
                    // new UI.Text( "Hint: " + job.log[job.log.length-1].split("]")[1] )
                );
            }
        }else{
            status.setDisplay( "block" );
            status.clear().add(
                new UI.Text( "Loopsearch: running" )
                //new UI.Text( "Check: " + job.check ),
                //new UI.Break(),
                //new UI.Text( "Running: " + job.running ),
                //new UI.Break(),
                //new UI.Text( "Log:" ),
                //new UI.Break()
            )
            //for( var i = 0; i < job.log.length; ++i ){
            //    status.add(
            //        new UI.Text( job.log[ i ] ).setMarginLeft( "10px" ),
            //        new UI.Break()
            //    );
            //}
        }

    }

    //

    function loadResults( job ){

        if( !job ) return;

        var baseUrl = job.urlFor( "file" ) + "/";
        var linkerName = isFragfit ? "linker_correl" : "input_pdb_file_linker";

        var files = {
            structurePdb: baseUrl + "input_pdb_file.pdb",
            linkerJson: baseUrl + linkerName + ".json"
        };

        if( isFragfit ){
            files.mapMrc = baseUrl + "input_mrc_file.mrc";
            files.linkerPdb = baseUrl + "loop_correl/ori_pdb_linker_file3.pdb";
        }else{
            files.linkerPdb = baseUrl + "input_pdb_file_linker2.pdb";
        }

        function init( widget ){
            results.add( widget );
        }

        loadFragResults( files )
            .then( init );
        
        stage.eachComponent( function( comp ){
            if( comp.name==="input_pdb_file.pdb" || comp.name==="input_pdb_file_linker2.pdb"){
                comp.setVisibility( false )
            }
        });

    }

    //

    container.add(
        toolWidget,
        status,
        results
    );
    // console.log(document.getElementById('res1').value)

    return container;

};

function makePluginLoader( name ){
    return function(){
        NGL.PluginRegistry.load( name, stage );
    };
}


////////////
// FragFit

function fragfitResultsLoader(){

    panel.setName( "FragFit Loader" );
    panel.add( new FragResultsLoaderWidget( true ) );

}

function fragfitJob(){

    panel.setName( "FragFit Job" );

    var server = new Server( window.location.origin + "/job/" );
    // 154:C, 164:C, EDKVEGYKK, 4.2

    function init(){
        panel.add( new FragJobWidget( server, true ) );
    }

    server.signals.toolsLoaded.add( init );

}

function fragfitExample(){

    panel.setName( "FragFit Example" );

    var files = {
        structurePdb: "data://ribosomexample.pdb",
        mapMrc: "data://ribocut4a.mrc",
        linkerPdb: "data://ori_pdb_linker_file3.pdb",
        linkerJson: "data://linker_correl.json"
    };

    function init( widget ){
        panel.add( widget );
    }

    function onError( error ){
        panel.add( new UI.Text( "ERROR" ) );
        console.error( error );
    }

    loadFragResults( files )
        .then( init )
        .catch( onError );

}

function fragfitStage(){

    panel.setName( "FragFit Stage" );

    var description = new UI.Panel().add(
        new UI.Html( "FragFit description ..." )
    );

    var newJobBtn = new UI.Button( "New Job" )
        .onClick( makePluginLoader( "fragfit-job" ) );
        
    var exampleBtn = new UI.Button( "Load Example" )
        .onClick( makePluginLoader( "fragfit-example" ) );
        
    var loaderBtn = new UI.Button( "Results Loader" )
        .onClick( makePluginLoader( "fragfit-loader" ) );

    panel.add(
        description,
        new UI.Panel().add( newJobBtn ),
        new UI.Panel().add( exampleBtn ),
        new UI.Panel().add( loaderBtn )
    );

}


///////////////
// FragSearch

function fragsearchResultsLoader(){

    panel.setName( "FragSearch Loader" );
    panel.add( new FragResultsLoaderWidget( false ) );

}

function fragsearchJob(){

    panel.setName( "SL2-Job" );

    var server = new Server( window.location.origin + "/job/" );

    function init(){
        panel.add( new FragJobWidget( server, false ) );
    }

    server.signals.toolsLoaded.add( init );

}

function fragsearchExample(){

    panel.setName( "SL2 Example" );

    var files = {
        structurePdb: "data://3dqb.pdb",
        linkerPdb: "data://fragsearch/input_pdb_file_linker3.pdb",
        linkerJson: "data://fragsearch/input_pdb_file_linker.json"
    };

    function init( widget ){
        panel.add( widget );
    }

    function onError( error ){
        panel.add( new UI.Text( "ERROR" ) );
        console.error( error );
    }

    loadFragResults( files )
        .then( init )
        .catch( onError );

}

function fragsearchStage(){

    panel.setName( "SuperLooper2" );

    var description = new UI.Panel().add(
        new UI.Html( "Start a new Sl2 job or load an example" )
    );

    var newJobBtn = new UI.Button( "New Job" )
        .onClick( makePluginLoader( "New SL2 Job" ) );

    var exampleBtn = new UI.Button( "Load Example" )
        .onClick( makePluginLoader( "SL2 Example" ) );

//    var loaderBtn = new UI.Button( "Results Loader" )
//        .onClick( makePluginLoader( "fragsearch-loader" ) );

    panel.add(
        description,
        new UI.Panel().add( newJobBtn ),
        new UI.Panel().add( exampleBtn )
        //new UI.Panel().add( loaderBtn )
    );

}
